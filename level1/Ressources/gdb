
#similar to a enter routine
   0x08048480 <+0>:     push   ebp #store ebp on the stack, decrementing esp
   0x08048481 <+1>:     mov    ebp,esp #store esp in ebp
   0x08048483 <+3>:     and    esp,0xfffffff0 #align esp to a multiple of 16
   0x08048486 <+6>:     sub    esp,0x50 #reserve 80 bytes in the stack

   0x08048489 <+9>:     lea    eax,[esp+0x10] #load effective adress (c: eax = &esp[0x10])
   0x0804848d <+13>:    mov    DWORD PTR [esp],eax #store eax (4 bytes) at the address of esp (similar to 4 pushes, but without decrementing esp)
=> 0x08048490 <+16>:    call   0x8048340 <gets@plt> #short hand to push isp + set isp to 0x8048340
   0x08048495 <+21>:    leave #short hand to esp = ebp, pop ebp
   0x08048496 <+22>:    ret #short hand to pop eip

01234567012345670123456701234567012345670123456701234567012345670123456701230000