following the de-compilation, we tried:

`bonus0@RainFall:~$ ./bonus0
 -
01234567890123456789AAAABBBBCCCCDDDDEEEEFFFF
 -
01234567890123456789aaaabbbbccccddddeeeeffff
0123456789012345678901234567890123456789 01234567890123456789
Segmentation fault (core dumped)`

my chips are on the fact that buff1 and buff2 are right next to each other in memory, so if p() did not terminate the input with a null byte, we ended up reading buff1 twice, overflowing the main buffer:

to test this theory we will construct 2 buffers with a clear distinction:

`bonus0@RainFall:~$ ./bonus0
 -
abcdefghijklmnopqrstuvwxyz
 -
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstABCDEFGHIJKLMNOPQRST ABCDEFGHIJKLMNOPQRST
Segmentation fault (core dumped)`

I wasn't that far (buff2 got read twice, not buff1, silly me :) )

time to use gdb to see exactly what can be done with this

see gdb and payload_asm

so our payload (asm) is only 16 bytes
we have 4 bytes to spare for the first string (will be padded)
the second string has 9 bytes to spare at the beginning, then 4 for the eip smashing, and 7 more
we will use the first 7 bytes for /bin/sh
the 8th will be changed by our payload to null terminate /bin/sh
the 9th will be padding
the 10th to 13th will point to the main buffer where our 2 strings got concatenated
the 14th to the 21st characters will be padding to trigger the smash

solution to input our 2 payload and get a responsive shell after: https://unix.stackexchange.com/questions/620561/keep-pipe-open-stdin-in-connected-to-terminal-after-pipe

after multiple tries (see gdb), we still can't make it work (because for some reason, our memory keeps being messed up when system is called)
so we decided to stop wasting time (we spent almost 4 hours trying to understand why it didn't work, while checking the memory and changing the payload)
if we pay attention to how the first and second input are used by function pp, we are guaranteed that only the first 20 chars of the first input will be copied (strcpy of a strncpy of 20 chars, strcpy will hit a zero because buff2 is unitialized, filled with zero and right after buff1)
we can then input up to 4096 chars as the first input, and when we input our second string it will override the first 20 characters of t inside p
so instead of having our exploit inside the first input and "/bin/sh" at the start of our second input, we can make a single payload very far inside the first input, and have the second input point to it (and hopefully we will find a position in memory that does not get messed up by system)
so our first payload will be: <padding * size><asm>/bin/sh
got it working (on the first try of the new script)